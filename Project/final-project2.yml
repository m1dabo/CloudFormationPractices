Description: >
  Mohammed Dabo / Deploy a High Availability Web App Using CloudFormation (Udagram Project)
Parameters:
  # Paramenters are entirely optional.
  # but using them will make your cloudformation templates more reusable
  # use them for things that may change over time, such as instance type,
  # VPCs and so on.
  EnvironmentName:
    Description: An environment name that will be in the first of each resources name
    Type: String

  VpcCiDR:
    Description: IP range [CiDR notation] for this
    Type: String
    Default: 10.0.0.0/16

  PublicSubnetCiDR1:
    Description: IP range [CiDR notation] for the PublicSubnet1
    Type: String
    Default: 10.0.0.0/24

  PublicSubnetCiDR2:
    Description: IP range [CiDR notation] for the PublicSubnet2
    Type: String
    Default: 10.0.1.0/24

  PrivateSubnetCiDR1:
    Description: IP range [CiDR notation] for the PrivateSubnet1
    Type: String
    Default: 10.0.2.0/24

  PrivateSubnetCiDR2:
    Description: IP range [CiDR notation] for the PrivateSubnet2
    Type: String
    Default: 10.0.3.0/24

  WebApplicationServersMinimumSize:
    Description: Web Application Servers Minimum Number
    Type: String
    Default: "2"

  WebApplicationServersMaximumSize:
    Description: Web Application Servers Maximum Number
    Type: String
    Default: "4"
  
  myLaunchTemplateVN:
    Description: my launch template version numvber
    Type: String
    Default: "1"

Resources:
  # instace profile contains the IAM Role name(s) that we want to associate to our auto scaling EC2 Servers
  # never give too much permissions to your EC2 instances! if they get hacked, the permissions get hacked also!
  # in this example, I create a Role called UdacityS3ReadOnlyC2 and just give it a policy of S3 Read-Only Access
  VPC:
    Type: AWS::EC2::VPC
    Properties:
      CidrBlock: !Ref VpcCiDR
      EnableDnsHostnames: true
      Tags:
        - Key: Name
          Value: !Ref EnvironmentName

  PublicSubnet1:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref VPC
      AvailabilityZone: !Select [0, !GetAZs ""]
      CidrBlock: !Ref PublicSubnetCiDR1
      MapPublicIpOnLaunch: false
      Tags:
        - Key: Name
          Value: !Sub ${EnvironmentName} Public Subnet (Avaialabilty Zone 1)

  PublicSubnet2:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref VPC
      AvailabilityZone: !Select [1, !GetAZs ""]
      CidrBlock: !Ref PublicSubnetCiDR2
      MapPublicIpOnLaunch: false
      Tags:
        - Key: Name
          Value: !Sub ${EnvironmentName} Public Subnet (Avaialabilty Zone 2)

  PrivateSubnet1:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref VPC
      AvailabilityZone: !Select [0, !GetAZs ""]
      CidrBlock: !Ref PrivateSubnetCiDR1
      MapPublicIpOnLaunch: false
      Tags:
        - Key: Name
          Value: !Sub ${EnvironmentName} Private Subnet (Avaialabilty Zone 1)

  PrivateSubnet2:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref VPC
      AvailabilityZone: !Select [1, !GetAZs ""]
      CidrBlock: !Ref PrivateSubnetCiDR2
      MapPublicIpOnLaunch: false
      Tags:
        - Key: Name
          Value: !Sub ${EnvironmentName} Private Subnet (Avaialabilty Zone 2)

  InternetGateway:
    Type: AWS::EC2::InternetGateway
    Tags:
        - Key: Name
          Value: !Sub ${EnvironmentName} Internet Gateway

  InternetGatewayAttachments:
    Type: AWS::EC2::VPCGatewayAttachment
    Properties:
      VpcId: !Ref VPC
      InternetGatewayId: !Ref InternetGateway

  NatGatewayElasticIP1:
    Type: AWS::EC2::EIP
    DependsOn: InternetGatewayAttachments
    Properties:
      Domain: vpc

  NatGatewayElasticIP2:
    Type: AWS::EC2::EIP
    DependsOn: InternetGatewayAttachments
    Properties:
      Domain: vpc

  NatGateway1:
    Type: AWS::EC2::NatGateway
    Properties:
      AllocationId: !GetAtt NatGatewayElasticIP1.AllocationId
      SubnetId: !Ref PublicSubnet1

  NatGateway2:
    Type: AWS::EC2::NatGateway
    Properties:
      AllocationId: !GetAtt NatGatewayElasticIP2.AllocationId
      SubnetId: !Ref PublicSubnet2

  PublicRT:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId: !Ref VPC
      Tags:
        - Key: Name
          Value: !Sub ${EnvironmentName} Public Routes

  DefaultPublicRoute:
    Type: AWS::EC2::Route
    DependsOn: InternetGatewayAttachments
    Properties:
      RouteTableId: !Ref PublicRT
      DestinationCidrBlock: 0.0.0.0/0
      GatewayId: !Ref InternetGateway

  PublicSubnetRTAssociation1:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      RouteTableId: !Ref PublicRT
      SubnetId: !Ref PublicSubnet1

  PublicSubnetRTAssociation2:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      RouteTableId: !Ref PublicRT
      SubnetId: !Ref PublicSubnet2

  PrivateRT1:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId: !Ref VPC
      Tags:
        - Key: Name
          Value: !Sub ${EnvironmentName} Private Routes (Avaialabilty Zone 1)

  DefaultPrivateRoute1:
    Type: AWS::EC2::Route
    Properties:
      RouteTableId: !Ref PrivateRT1
      DestinationCidrBlock: 0.0.0.0/0
      NatGatewayId: !Ref NatGateway1

  PrivateSubnetRTAssociation1:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      RouteTableId: !Ref PrivateRT1
      SubnetId: !Ref PrivateSubnet1

  PrivateRT2:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId: !Ref VPC
      Tags:
        - Key: Name
          Value: !Sub ${EnvironmentName} Private Routes (Avaialabilty Zone 2)

  DefaultPrivateRoute2:
    Type: AWS::EC2::Route
    Properties:
      RouteTableId: !Ref PrivateRT2
      DestinationCidrBlock: 0.0.0.0/0
      NatGatewayId: !Ref NatGateway2

  PrivateSubnetRTAssociation2:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      RouteTableId: !Ref PrivateRT2
      SubnetId: !Ref PrivateSubnet2

  M1daboS3ReadOnlyEC2Instance:
    Type: AWS::IAM::Role
    Properties:
      RoleName: !Sub ${EnvironmentName}-Role
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: Allow
            Principal:
              Service:
                - ec2.amazonaws.com
            Action:
              - sts:AssumeRole
      Path: "/"

  RolePolicy:
    Type: AWS::IAM::Policy
    Properties:
      PolicyName: AmazonS3ReadOnlyAccess
      PolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: Allow
            Action:
              - s3:Get*
              - s3:List*
            Resource:
              - arn:aws:s3:::my-220324843743-s3-bucket
              - arn:aws:s3:::my-220324843743-s3-bucket/*
      Roles:
        - Ref: M1daboS3ReadOnlyEC2Instance

    ProfileWithRolesForM1daboUdacityProject2App:
    Type: AWS::IAM::InstanceProfile
    Properties:
      Path: "/"
      Roles:
        - Ref: M1daboS3ReadOnlyEC2Instance

  LoadBalancerSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: Allow http traffic to and from load balancer
      VpcId: !Ref VPC
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: 80
          ToPort: 80
          CidrIp: 0.0.0.0/0
      SecurityGroupEgress:
        - IpProtocol: tcp
          FromPort: 80
          ToPort: 80
          CidrIp: 0.0.0.0/0
        - IpProtocol: tcp
          FromPort: 8080
          ToPort: 8080
          CidrIp: 0.0.0.0/0

  WebServerSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: Allow http and ssh to our load balancer
      VpcId: !Ref VPC
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: 80
          ToPort: 80
          CidrIp: 0.0.0.0/0
        - IpProtocol: tcp
          FromPort: 22
          ToPort: 22
          CidrIp: 0.0.0.0/0
      SecurityGroupEgress:
        - IpProtocol: tcp
          FromPort: 0
          ToPort: 65535
          CidrIp: 0.0.0.0/0

# Sample UserData
# When creating your Launch Configuration, you may need a UserData script
# here's one that you can use for Ubuntu Linux that will:
# Install Apache Web Server, Start it, and create an index.html that will be displayed
# when you visit the IP address of this server with your web browser
#Here it is:
#
#          #!/bin/bash
#          apt-get update -y
#          apt-get install apache2 -y
#          systemctl start apache2.service
#          cd /var/www/html
#          echo "Udacity Demo Web Server Up and Running!" > index.html

# Volume Size will be 10 GB to avoid getting in issues like the project guidlines.
  WebApplicationLaunchConfiguration:
    Type: AWS::AutoScaling::LaunchConfiguration
    Properties:
      UserData:
        Fn::Base64: !Sub |
          #!/bin/bash
          apt-get update -y
          apt-get install unzip awscli -y
          apt-get install apache2 -y
          systemctl start apache2.service
          cd /var/www/html
          aws s3 cp s3://my-220324843743-s3-bucket/M1dabo.zip .
          unzip -o M1dabo.zip
      ImageId: ami-047a51fa27710816e
      KeyName: m1daboKey1
      IamInstanceProfile: !Ref ProfileWithRolesForM1daboUdacityProject2App
      SecurityGroups:
        - Ref: WebServerSecurityGroup
      InstanceType: t3.small
      BlockDeviceMappings:
        - DeviceName: "/dev/sdk"
          Ebs:
            VolumeSize: "10"
# or we could use this but I'll comment it
# LaunchTemplate is the the same like LaunchConfiguration
# the difference is after properties we should write LaunchTemplateData:


#  WebApplicationLaunchTemplate:
#  Type: AWS::EC2::LaunchTemplate
#  Properties: 
#    LaunchTemplateData:
#      UserData:
#        Fn::Base64: !Sub |
#          #!/bin/bash
#          apt-get update -y
#          apt-get install unzip awscli -y
#          apt-get install apache2 -y
#          systemctl start apache2.service
#          cd /var/www/html
#          aws s3 cp s3://my-220324843743-s3-bucket/M1dabo.zip .
#          unzip -o M1dabo.zip
#      ImageId: ami-047a51fa27710816e
#      KeyName: m1daboKey1
#      SecurityGroupIds:
#        - Ref: WebServerSecurityGroup
#      InstanceType: t3.small
#      BlockDeviceMappings:
#      - DeviceName: "/dev/sdk"
#        Ebs:
#          VolumeSize: '10'

  WebApplicationTargetGroup:
    Type: AWS::ElasticLoadBalancingV2::TargetGroup
    Properties:
      HealthCheckIntervalSeconds: 10
      HealthCheckPath: /
      HealthCheckProtocol: HTTP
      HealthCheckTimeoutSeconds: 8
      HealthyThresholdCount: 2
      Port: 80
      Protocol: HTTP
      UnhealthyThresholdCount: 5
      VpcId: !Ref VPC

  WebApplicationASGroup:
    Type: AWS::AutoScaling::AutoScalingGroup
    Properties:
      VPCZoneIdentifier:
        - !Ref PrivateSubnet1
        - !Ref PrivateSubnet2
      LaunchConfigurationName:
        Ref: WebApplicationLaunchConfiguration
      MinSize: !Ref WebApplicationServersMinimumSize
      MaxSize: !Ref WebApplicationServersMaximumSize
      TargetGroupARNs:
        - Ref: WebApplicationTargetGroup

# the replacable code for my autoscaling group is 
# this is applicable if i used the launch template instead of Launch configuration
# I've used here a !sub as if i've used a stack before for network only and I'm using from it my environment name as a parameter 

#  WebApplicationGroup:
#  Type: AWS::AutoScaling::AutoScalingGroup
#  Properties:
#    VPCZoneIdentifier:
#    - Fn::ImportValue: 
#        !Sub "${EnvironmentName}-PRIV-NETS"
#    LaunchTemplate:
#      LaunchTemplateId: !Ref WebApplicationLaunchTemplate
#      Version: !Ref myLaunchTemplateVN
#    MinSize: '3'
#    MaxSize: '5'
#    TargetGroupARNs:
#    - Ref: WebAppTargetGroup

  WebApplicationLoadBalancer:
    Type: AWS::ElasticLoadBalancingV2::LoadBalancer
    Properties:
      SecurityGroups:
        - Ref: LoadBalancerSecurityGroup
      Subnets:
        - !Ref PublicSubnet1
        - !Ref PublicSubnet2

  Listener:
    Type: AWS::ElasticLoadBalancingV2::Listener
    Properties:
      DefaultActions:
        - Type: forward
          TargetGroupArn:
            Ref: WebApplicationTargetGroup
      LoadBalancerArn:
        Ref: WebApplicationLoadBalancer
      Port: 80
      Protocol: HTTP

  ElasticLoadBalancerListenerRule:
    Type: AWS::ElasticLoadBalancingV2::ListenerRule
    Properties:
      Actions:
        - Type: forward
          TargetGroupArn: !Ref "WebApplicationTargetGroup"
      Conditions:
        - Field: path-pattern
          Values: [/]
      ListenerArn: !Ref "Listener"
      Priority: 1
Outputs: 
  # This is also optional.
  # Bonus points for useful outputs!
  # for example, if you create a Load Balancer
  # it's nice to output the URL to it here, so that we don't have to go to the console to get it.
  VPC:
    Description: A reference variable to my VPC
    Value: !Ref VPC
    Export:
      Name: !Sub ${EnvironmentName}-VPC-ID

  PublicSubnets:
    Description: An array list of the public subnets
    Value: !Join [",", [!Ref PublicSubnet1, !Ref PublicSubnet2]]
    Export:
      Name: !Sub ${EnvironmentName}-PUBLIC-SUBNETS

  PrivateSubnets:
    Description: An array list of the private subnets
    Value: !Join [",", [!Ref PrivateSubnet1, !Ref PrivateSubnet2]]
    Export:
      Name: !Sub ${EnvironmentName}-PRIVATE-SUBNETS

  WebApplicationLoadBalancerDNSName:
    Description: Make an http:// in front of DNS name or Public URL of the Load Balancer the final DNS name would be like below value
    Value: !Join ["", ["http://", !GetAtt WebApplicationLoadBalancer.DNSName]]
    Export:
      Name: !Sub ${EnvironmentName}-LoadBalancer-DNSName
